<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS只安装mysql client</title>
      <link href="2021/04/20/centos-zhi-an-zhuang-mysql-client/"/>
      <url>2021/04/20/centos-zhi-an-zhuang-mysql-client/</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS只安装mysql-client"><a href="#CentOS只安装mysql-client" class="headerlink" title="CentOS只安装mysql client"></a>CentOS只安装mysql client</h2><h3 id="开箱即用-gt-gt-gt-gt"><a href="#开箱即用-gt-gt-gt-gt" class="headerlink" title="开箱即用 &gt;&gt;&gt;&gt;"></a>开箱即用 &gt;&gt;&gt;&gt;</h3><pre class="line-numbers language-shell"><code class="language-shell"># 获取最新源 https://dev.mysql.com/downloads/repo/yum/# 此处通过 rpm去安装yum源wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm# 本地安装下载的rpm源sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm # 检查是否生效yum repolist enabled | grep "mysql.*-community.*"# 会看见类似结果，说明生效[root@VM-8-8-centos ~]# yum repolist enabled | grep "mysql.*-community.*"mysql-connectors-community/x86_64   MySQL Connectors Community               194mysql-tools-community/x86_64        MySQL Tools Community                    126mysql80-community/x86_64            MySQL 8.0 Community Server               247# 下面通过yum查看是否有 mysql-community-clientyum search mysql | grep "mysql.*client"# 看结果 已存在 'mysql-community-client'，最后去安装即可[root@VM-8-8-centos ~]# yum search mysql | grep "mysql.*client"mysql-community-client.i686 : MySQL database client applications and toolsmysql-community-client.x86_64 : MySQL database client applications and toolsmysql-community-client-plugins.i686 : Shared plugins for MySQL clientmysql-community-client-plugins.x86_64 : Shared plugins for MySQL clientmysql-community-common.i686 : MySQL database common files for server and clientmysql-community-libs.i686 : Shared libraries for MySQL database clientmysql-community-libs.x86_64 : Shared libraries for MySQL database clientroot-sql-mysql.x86_64 : MySQL client plugin for ROOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考</strong>【<a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html" target="_blank" rel="noopener">MYSQL官网安装教程</a>】</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/07/28/hello-world/"/>
      <url>2020/07/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次：恢复Mysql数据</title>
      <link href="2020/03/09/ji-yi-ci-hui-fu-mysql-shu-ju/"/>
      <url>2020/03/09/ji-yi-ci-hui-fu-mysql-shu-ju/</url>
      
        <content type="html"><![CDATA[<p>0x06：项目起初对框架不熟悉而导致 </p><a id="more"></a><p>前言：起初想通过全局sql日志恢复，后面查看mysql配置并没有打开全局日志，但是打开了 bin-log,及二进制日志，平均每个1G左右。</p><p>开始方案：据官方了解，bin-log 可以通过 mysqlbinlog 工具解析<br>启动方案：</p><ul><li><p>通过 解析base64<code>-v --base64-output=decode-rows</code>并过滤只提取 <code>--database</code> 库的日志.</p><pre class="line-numbers language-shell"><code class="language-shell">  mysqlbinlog -v --base64-output=decode-rows --database=databasename mysql-bin.000016 > 16.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>当前目录下的 <code>mysql-bin.000016</code> 并输出到当前 <code>16.log</code>文件中.</p><pre class="line-numbers language-shell"><code class="language-shell">  /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;  /*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;  DELIMITER /*!*/;  # at 4  #200115  0:52:33 server id 10100332  end_log_pos 123 CRC32 0xf47ac891     Start: binlog v 4, server v 5.7.21-enterprise-commercial-advanced-log created 200115  0:52:33  # at 123  #200115  0:52:33 server id 10100332  end_log_pos 154 CRC32 0xcd2ae247     Previous-GTIDs  # [empty]  # at 154  .....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后提取<code>INSERT INTO</code>语句大概是这样的：</p><pre class="line-numbers language-shell"><code class="language-shell">  # at 507657591  # ...  ### INSERT INTO `database`.`tabel`  ### SET  ###   @1=146  ###   @2=61  ###   @3=NULL  ###   .....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上面的 <code>@</code> 符号后面的数字就是字段的下标，从<code>1</code>开始.</p></li><li><p>最后解析了<code>76G</code>日志</p></li></ul><p>后记：凡事三思而后行!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于WeChat-OAuth第三方登录</title>
      <link href="2020/02/24/ji-yu-wechat-oauth-di-san-fang-deng-lu/"/>
      <url>2020/02/24/ji-yu-wechat-oauth-di-san-fang-deng-lu/</url>
      
        <content type="html"><![CDATA[<p>0x05：<code>开始理解OAuth</code></p><a id="more"></a><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><img src="https://pjmic.github.io//post-images/1582553011394.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lombok注解@Builder简单创建对象</title>
      <link href="2020/01/20/lombok-zhu-jie-builder-jian-dan-chuang-jian-dui-xiang/"/>
      <url>2020/01/20/lombok-zhu-jie-builder-jian-dan-chuang-jian-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>0x04：<code>Java基础</code></p><a id="more"></a><p><strong>不废话注解开始：</strong></p><h2 id="一、-导入依赖"><a href="#一、-导入依赖" class="headerlink" title="一、 导入依赖"></a><strong>一、 导入依赖</strong></h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="二、创建entity"><a href="#二、创建entity" class="headerlink" title="二、创建entity"></a><strong>二、创建entity</strong></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Builder<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Description //TODO . * @Author by LiuChunming on 2020/01/20. */</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String hobby<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>并添加注解 @Builder @Data</strong></p></blockquote><h2 id="三、开始测试"><a href="#三、开始测试" class="headerlink" title="三、开始测试"></a><strong>三、开始测试</strong></h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">builderInterfaceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建对象</span>        Tper tper <span class="token operator">=</span> Tper<span class="token punctuation">.</span><span class="token function">builder</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">name</span> <span class="token punctuation">(</span> <span class="token string">"张三"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">age</span> <span class="token punctuation">(</span> <span class="token string">"19"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">sex</span> <span class="token punctuation">(</span> <span class="token string">"男"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">hobby</span> <span class="token punctuation">(</span> <span class="token string">"Code"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">aDouble</span> <span class="token punctuation">(</span> <span class="token number">8D</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">build</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> tper <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><strong>测试结果：</strong></li></ul><p>​    <img src="https://pjmic.github.io//post-images/1579484887683.jpg" alt=""></p><blockquote><p><strong>Share Over !</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis select返回值为List&lt;Map&gt;并将表字段的两列为K,V</title>
      <link href="2020/01/07/mybatis-select-fan-hui-zhi-wei-listlessmapgreaterbing-jiang-biao-zi-duan-de-liang-lie-zuo-wei-keyvalue/"/>
      <url>2020/01/07/mybatis-select-fan-hui-zhi-wei-listlessmapgreaterbing-jiang-biao-zi-duan-de-liang-lie-zuo-wei-keyvalue/</url>
      
        <content type="html"><![CDATA[<p>0x03：<code>mybatis</code></p><a id="more"></a><h2 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h2><hr/>### 表中有这样的数据<p><img src="https://pjmic.github.io//post-images/1578412769529.jpg" alt=""></p><h3 id="需要实现"><a href="#需要实现" class="headerlink" title="需要实现"></a>需要实现</h3><p><img src="https://pjmic.github.io//post-images/1578412975303.jpg" alt=""></p><h3 id="思路是重写返回Mybatis-select默认映射Map的返回接口，通过源码追踪，发现-“ResultHandler”这个接口"><a href="#思路是重写返回Mybatis-select默认映射Map的返回接口，通过源码追踪，发现-“ResultHandler”这个接口" class="headerlink" title="思路是重写返回Mybatis select默认映射Map的返回接口，通过源码追踪，发现 “ResultHandler”这个接口;"></a>思路是重写返回Mybatis select默认映射Map的返回接口，通过源码追踪，发现 “ResultHandler”这个接口;</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Clinton Begin */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span>ResultContext<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> resultContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="通过观察他的实现有两个实现："><a href="#通过观察他的实现有两个实现：" class="headerlink" title="通过观察他的实现有两个实现："></a>通过观察他的实现有两个实现：</h3><ul><li><p>DefaultMapResultHandler :  返回的是 Map</p></li><li><p>DefaultResultHandler ：返回的是 List<Object></p></li></ul><p>#待续。。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java内省机制</title>
      <link href="2020/01/07/java-nei-sheng-ji-zhi/"/>
      <url>2020/01/07/java-nei-sheng-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>0x02：<code>Java基础</code></p><a id="more"></a><h1 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>peidasoft<span class="token punctuation">.</span>Introspector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeanInfo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Introspector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>PropertyDescriptor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanInfoUtil</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setProperty</span><span class="token punctuation">(</span>UserInfo userInfo<span class="token punctuation">,</span>String userName<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        PropertyDescriptor propDesc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>UserInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method methodSetUserName<span class="token operator">=</span>propDesc<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodSetUserName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> <span class="token string">"wong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set userName:"</span><span class="token operator">+</span>userInfo<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>UserInfo userInfo<span class="token punctuation">,</span>String userName<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        PropertyDescriptor proDescriptor <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>UserInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method methodGetUserName<span class="token operator">=</span>proDescriptor<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object objUserName<span class="token operator">=</span>methodGetUserName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get userName:"</span><span class="token operator">+</span>objUserName<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> more <span class="token operator">--</span><span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java内省 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker+Gitlab+Jenkins自动化管理项目</title>
      <link href="2019/11/11/dockergitlabjenkins/"/>
      <url>2019/11/11/dockergitlabjenkins/</url>
      
        <content type="html"><![CDATA[<p>0x01：👏搭建项目自动化部署</p><a id="more"></a><h3 id="一、环境配置："><a href="#一、环境配置：" class="headerlink" title="一、环境配置：**"></a>一、环境配置：**</h3><blockquote><ul><li><code>System</code>：CentOS 7</li><li><code>GitLab Version</code>：beginor/gitlab-ce:11.0.1-ce.0</li><li><code>JenKins Version</code>：官网最新 <a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">jenkins.war</a></li><li><code>JDK Version</code>: 1.8 </li><li><code>Maven Version</code>:  3.6.1 </li></ul></blockquote><h3 id="二、Dokcer"><a href="#二、Dokcer" class="headerlink" title="二、Dokcer:"></a>二、Dokcer:</h3><ol><li><h4 id="安装需要的库"><a href="#安装需要的库" class="headerlink" title="安装需要的库"></a><strong>安装需要的库</strong></h4><ul><li><pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre></li></ul></li><li><h4 id="添加docker的源"><a href="#添加docker的源" class="headerlink" title="添加docker的源"></a><strong>添加docker的源</strong></h4><ul><li><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></pre></li></ul></li><li><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a><strong>安装Docker</strong></h4><ul><li><pre class=" language-shell"><code class="language-shell">sudo yum install docker-ce</code></pre></li></ul></li><li><h4 id="启动docker服务和开机自启"><a href="#启动docker服务和开机自启" class="headerlink" title="启动docker服务和开机自启"></a><strong>启动docker服务和开机自启</strong></h4><ul><li><pre class=" language-shell"><code class="language-shell">sudo systemctl start dockersudo systemctl enable docker</code></pre></li></ul></li><li><h4 id="Docker-Installed-End"><a href="#Docker-Installed-End" class="headerlink" title="Docker Installed End"></a><strong><code>Docker Installed End</code></strong></h4></li></ol><h3 id="三、Gitlab："><a href="#三、Gitlab：" class="headerlink" title="三、Gitlab："></a>三、Gitlab：</h3><ul><li><h4 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h4><ul><li>关闭防火墙：systemctl stop firewalld</li><li>关闭防火墙自启：systemctl disable firewalld</li></ul></li></ul><ol><li><h4 id="创建映射文件夹（可自定义，待会儿自己修改命令相关的参数）"><a href="#创建映射文件夹（可自定义，待会儿自己修改命令相关的参数）" class="headerlink" title="创建映射文件夹（可自定义，待会儿自己修改命令相关的参数）"></a><strong>创建映射文件夹</strong>（可自定义，待会儿自己修改命令相关的参数）</h4><ul><li><pre class=" language-shell"><code class="language-shell">mkdir -p /data/gitlab/etcmkdir -p /data/gitlab/logmkdir -p /data/gitlab/data</code></pre></li></ul></li><li><h4 id="安装并启动GitLab"><a href="#安装并启动GitLab" class="headerlink" title="安装并启动GitLab"></a><strong>安装并启动GitLab</strong></h4><ul><li><blockquote><h4 id="参数解析："><a href="#参数解析：" class="headerlink" title="参数解析："></a><strong><code>参数解析：</code></strong></h4></blockquote><pre class=" language-shell"><code class="language-shell">--detach 表示后台运行--publish 表示容器类与宿机映射和端口--name 表示容器的名字--restart 重启策略：退出容器是重启容器</code></pre></li><li><blockquote><h4 id="构建容器命令"><a href="#构建容器命令" class="headerlink" title="构建容器命令"></a><code>构建容器命令</code></h4></blockquote><pre class=" language-shell"><code class="language-shell">docker run \ --detach \ --publish 998:22 \ --publish 8443:443 \ --publish 80:80 \ --name gitlab \ --restart unless-stopped \ -v /data/gitlab/etc:/etc/gitlab \ -v /data/gitlab/log:/var/log/gitlab \ -v /data/gitlab/data:/var/opt/gitlab \ beginor/gitlab-ce:11.0.1-ce.0</code></pre></li><li><blockquote><p><strong>在命令的最后的一行为镜像的名称(<code>beginor/gitlab-ce:11.0.1-ce.0</code>)或者ID(需要先<code>docker pull 镜像</code>，后通过 <code>docker images</code>，可以获取到镜像的ID)，运行上面的命令即可安装并启动gitlab（这样他会先检查本地有没有此镜像，没有就会先pull，然后再带参数run）。</strong></p></blockquote><pre class=" language-shell"><code class="language-shell">docker ps： 查看正在运行的容器docker ps -a：查看所有创建的容器</code></pre></li></ul></li></ol><h3 id="四、Jenkins："><a href="#四、Jenkins：" class="headerlink" title="四、Jenkins："></a>四、Jenkins：</h3><ol><li><h4 id="下载相关的包"><a href="#下载相关的包" class="headerlink" title="下载相关的包:"></a><strong>下载相关的包</strong>:</h4><ul><li><code>Jenkins.war包（这儿是用java启动，你也可以通过docker）、maven、jdk</code></li></ul></li><li><h4 id="运行参数"><a href="#运行参数" class="headerlink" title="运行参数:"></a><strong>运行参数</strong>:</h4><ul><li><pre class=" language-shell"><code class="language-shell">java  -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --httpPort=8088 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20</code></pre></li><li><blockquote><p><code>参数解析：</code></p><pre class=" language-shell"><code class="language-shell">java  -Djava.awt.headless=true #解释：https://www.cnblogs.com/wudi-dudu/p/7871405.html   -DJENKINS_HOME=/var/lib/jenkins #定义Jenkins的根目录   -jar /usr/lib/jenkins/jenkins.war #war包位置，根据你的实际情况填写参数   --logfile=/var/log/jenkins/jenkins.log #Jenkins的日志输出   --webroot=/var/cache/jenkins/war #Jenkins缓存路径   --httpPort=8088 #Jenkins的端口（看自己的端口情况修改）   --debug=5 #   --handlerCountMax=100 #   --handlerCountMaxIdle=20 #</code></pre></blockquote></li></ul></li><li><h4 id="访问-http-ip-httpPort-即可开始Jenkins之旅"><a href="#访问-http-ip-httpPort-即可开始Jenkins之旅" class="headerlink" title="访问 http://ip:httpPort 即可开始Jenkins之旅:"></a><strong>访问 <a href="http://ip:httpPort">http://ip:httpPort</a> 即可开始<code>Jenkins</code>之旅</strong>:</h4><ul><li>首先去提示的路径复制密码到 Input 框;</li><li>然后选择推荐插件，这儿可能有点慢，看各自的网速;</li><li>安装完后即可创建账户;</li><li>Jenkins搭建结束。</li></ul></li></ol><h3 id="五、实现从Gitlab自动拉取代码并部署："><a href="#五、实现从Gitlab自动拉取代码并部署：" class="headerlink" title="五、实现从Gitlab自动拉取代码并部署："></a>五、实现从Gitlab自动拉取代码并部署：</h3><ol><li><h4 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a><strong>登录界面</strong></h4><p><a href="https://imgchr.com/i/KrPuwD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/26/KrPuwD.md.png" alt="KrPuwD.md.png"></a></p></li><li><h4 id="登录后的界面（新的没有任何的任务）"><a href="#登录后的界面（新的没有任何的任务）" class="headerlink" title="登录后的界面（新的没有任何的任务）"></a><strong>登录后的界面</strong>（新的没有任何的任务）</h4><p><img src="https://s2.ax1x.com/2019/10/26/KrP20U.png" alt="KrP20U.png"></p></li><li><h4 id="新建工作空间"><a href="#新建工作空间" class="headerlink" title="新建工作空间"></a><strong>新建工作空间</strong></h4><ol><li><p><strong>创建任务</strong><img src="https://s2.ax1x.com/2019/10/27/KriOK0.png" alt="KriOK0.png"></p></li><li><p><strong>通用配置</strong></p><ol><li><p>这儿配置两个参数：第一个参数 <strong>Discard old builds</strong> <img src="https://s2.ax1x.com/2019/10/27/KretoV.png" alt="KretoV.png"></p></li><li><p><strong>第二个参数 This project is  parameterized</strong> </p></li></ol><p><img src="https://s2.ax1x.com/2019/10/27/KrlguF.png" alt="KrlguF.png"> </p></li><li><p><strong>源码管理</strong>（我们用gitlab，这儿需要自己现在Gitlab中去创建项目和获取项目地址）<img src="https://s2.ax1x.com/2019/10/27/KrtNRA.png" alt="KrtNRA.png"></p></li><li><p><strong>构建触发器</strong>（构建方式有好多种，具体看实际情况，日程表可以直接copy）</p><p><img src="https://s2.ax1x.com/2019/10/27/KrtWMq.png" alt="KrtWMq.png"></p><p><code>可参考SCDN</code>：【<a href="https://blog.csdn.net/xueyingqi/article/details/53216506" target="_blank" rel="noopener">Poll SCM</a>】</p></li><li><p><strong>构建环境</strong>：不用设置，跳过</p></li><li><p><strong>构建</strong>：因为启动项目的方式有很多种方案，所以这儿可以使用骨灰级的方式（shell）</p><ul><li><p>ps：<strong>本次演示的是在搭建的Jenkins的服务器中，启动项目，如果你需要将项目到第三方服务器是上启动，就得在第三方服务器的路径下写启动脚本（start.sh）,这是一种解决方案，但不是绝对的。</strong></p></li><li><p>添加构建方式： <code>Execute shell</code></p></li><li><pre class=" language-shell"><code class="language-shell">#$：这儿是在引用刚刚在 This project is  parameterized 配置的参数case $test_dev in   deploy)   #当选择的是 deploy 就执行下面呢的命令,注意绝对路径     /usr/local/maven/bin/mvn clean package --settings /usr/local/maven/conf/settings.xml -Dmaven.test.skip=true     ;;   rollback)   #当选择的是这个即是回滚        echo "${version}"     rm -rf target     #${JENKINS_HOME}此参数是Jenkins默认的俄路径，自己和自己的核对改成对应的路径     cp -R ${JENKINS_HOME}/jobs/你的任务名/builds/${version}/archive/target .     pwd && ls     ;;   *)     exit     ;;esacjenkinsjarpath=${JENKINS_HOME}/workspace/你的任务名 #如test_devjarpath=/data/test/target #这是你要启动项目的路径（将jar包复制到此目录）cp ${jenkinsjarpath}/target/test.jar /data/test/ #将jar包复制到jarpathsh /data/test/start.sh ${port} #执行jarpath的shell脚本（类容为启动jar包的命令）echo "Start Run......"</code></pre></li><li><p>start.sh</p><pre class=" language-shell"><code class="language-shell">#!/bash/binjarName=test.jarfunction shutDown(){        #获取上一次的构建的项目pid        pid=`ps -ef|grep ${jarName}|grep -v grep|awk '{print $2}'`             kill -9 ${pid} #干掉             echo "shut down" #打印信息}function startUp(){        #2:是打印错误到屏幕，&: 打印到后台        nohup java -jar test.jar --server.port=$1  >> ./logs.log 2>&1 & #$1是运用上面参数${port}        echo "start up"}#先关闭上一个项目shutDown()#启动新构建的项目startUp()</code></pre></li></ul></li><li><p><strong>构建后操作</strong></p><p><img src="https://s2.ax1x.com/2019/10/27/KrwuBq.png" alt="KrwuBq.png"></p></li></ol></li><li><p>回到开始：</p><p><img src="https://s2.ax1x.com/2019/10/27/KrwCHP.png" alt="KrwCHP.png"></p></li><li><p><strong>现在你可以是实现自动Gitlab+jenkins 构建项目了。</strong></p></li><li><p><strong>Shell 脚本方面可以参考下</strong> 【<a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">菜鸟教程</a>】</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
